2025-08-18 Mon 09:59

Approach: Greedy

Intuition

According to the problem statement, meeting i starts on start day i and ends on end day i.
You are allowed to attend a meeting on any day within the interval from start day i to end day i.

Since only one meeting can be attended per day, we apply a greedy strategy: if it is possible to attend both meetings i and j on day k, we should prioritize the one with the earlier end time, that is, the minimum of end day i and end day j.
This ensures we leave more room to accommodate other meetings later.

Following this principle, we assume that the latest any meeting ends is max day.
We can then iterate through each day from 1 to max day and greedily choose which meeting to attend on each day.
To do this efficiently, we use a min heap to keep track of the end times of currently available meetings.
We also sort all meetings by their start time in advance.

Let the current day be i. At each day, we perform the following steps:

Add to the candidate queue, which is the min heap, all meetings whose start day is less than or equal to i.
At this point, the heap contains all meetings available to attend on day i or earlier.

Remove from the heap all meetings whose end day is less than i, as they can no longer be attended.

If the heap is not empty, we attend the meeting with the earliest end time, which is at the top of the heap.
We increment the count of attended meetings by one, and remove it from the heap.

Finally, return the total number of meetings attended.

- - -
https://cs.stackexchange.com/questions/109370/are-of-the-order-of-n-and-big-o-the-same-thing

the professor mentioned two methods used to measure asymptotic complexity.
Θ(n)
is the order of n.
O(n)
is big O of n.
the professor explained
Θ(n)
    gives you both the lower bound and an upper bound.
O(n)
    is just upper bound.
- - -

Complexity analysis

Let n be the number of meetings in the given array events, and let T be the maximum value of any end time in events.

Time complexity: Big O of (T plus n) log n.

Sorting the array events takes Big O of n log n time.
After sorting, we iterate over each day from 1 to T, giving us T time points to process.

For each day, we may add or remove meetings from the priority queue, which maintains at most n elements.
Each insertion or deletion operation in the heap takes Big O of log n time.

Therefore, the total cost of heap operations across all days is Big O of T log n.
Combining both steps, the overall time complexity becomes Big O of (T plus n) log n.

Space complexity: Big O of n.

We use a priority queue, that is a min heap, to store the end times of meetings that are available to attend.
Since there are at most n meetings, the heap will contain at most n elements at any given time.
Thus, the space complexity is Big O of n.
